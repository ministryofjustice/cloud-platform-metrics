name: deploy

on:
  push:
    branches: [main]

jobs:
  ecr:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # This is required for requesting the JWT
      contents: read # This is required for actions/checkout
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.ECR_ROLE_TO_ASSUME }}
          aws-region: ${{ vars.ECR_REGION }}
      - uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr
      - run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
      - run: |
          cat kubectl_deploy/deployment.yaml | envsubst > deployments/deployment.yaml
          cat kubectl_deploy/ingress.yaml | envsubst > deployments/ingress.yaml
          cat kubectl_deploy/service.yaml | envsubst > deployments/service.yaml
          cat kubectl_deploy/serviceaccount.yaml | envsubst > deployments/serviceaccount.yaml
          cat kubectl_deploy/dashboard-cloud-platform-aws-metrics.yaml | envsubst > deployments/dashboard-cloud-platform-aws-metrics.yaml
          cat kubectl_deploy/dashboard-cloud-platform-namespace-metrics.yaml | envsubst > deployments/dashboard-cloud-platform-namespace-metrics.yaml
          cat kubectl_deploy/dashboard-cloud-platform-performance-metrics.yaml | envsubst > deployments/dashboard-cloud-platform-performance-metrics.yaml
        env:
          IMAGE_TAG: ${{ github.sha }}
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ vars.ECR_REPOSITORY }}
          NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
      - run: |
          echo "${{ secrets.KUBE_CERT }}" > ca.crt
          kubectl config set-cluster ${KUBE_CLUSTER} --certificate-authority=./ca.crt --server=https://${KUBE_CLUSTER}
          kubectl config set-credentials deploy-user --token=${{ secrets.KUBE_TOKEN }}
          kubectl config set-context ${KUBE_CLUSTER} --cluster=${KUBE_CLUSTER} --user=deploy-user --namespace=${KUBE_NAMESPACE}
          kubectl config use-context ${KUBE_CLUSTER}
          kubectl -n ${KUBE_NAMESPACE} apply -f deployments/
        env:
          KUBE_NAMESPACE: ${{ secrets.KUBE_NAMESPACE }}
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}